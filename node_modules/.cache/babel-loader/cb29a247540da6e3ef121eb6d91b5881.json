{"ast":null,"code":"import firebase from '../fbConfig';\nimport { sendMessage, joinTheRoom, updateTheCustomers, leaveTheRoom } from \"../client\";\nimport { NEW_MESSAGE, TOGGLE_ROOM, NEW_CUSTOMER, TOGGLE_SUPPORT, UPDATE_CUSTOMER, INCREMENT_COUNTS, SET_MOVIE_FILTER, POPULATE_MOVIES, SET_GENRE, TOGGLE_BOX, RESET_CHECKBOX, TOGGLE_CLICK, SET_CLICK, RESET_CLICK, LOGIN, LOGOUT, SIGNUP, ATTEMPT_LOGIN, INVALID_LOGIN, LOGIN_ERROR, SUCCESSFUL_LOGIN, STORE_REVIEWS, ADD_MOVIE_TO_USER, COMPLETE_ONBOARDING, FILTER_USED, TOGGLE_BOARDING, POPULATE_USER_MOVIES, ONBOARD, FETCH_FAIL, IS_FETCHING, TOGGLE_FETCH, RESET_FETCH, TOGGLE_FETCHPOST, TOGGLE_SIGNUP_FLAG, SET_SIGNUP_FLAG, RESET_SIGNUP_FLAG, SUCCESSFUL_SIGNUP, INVALID_SIGNUP } from \"./actionTypeConstants\";\nimport { INVALID } from '../constants'; //actions for live chat feature\n\nexport const sendToServer = (message, name) => {\n  return dispatch => {\n    sendMessage(message, name, result => {\n      console.log(result);\n      dispatch(newMessage(result));\n    });\n  };\n};\nexport const joinRoom = (rm, name) => {\n  return dispatch => {\n    console.log(\"testing join room\");\n    joinTheRoom(rm, name, result => {\n      dispatch(toggleRoom(result.flag));\n      dispatch(newCustomer(result.customers));\n      dispatch(toggleSupport(result.showSupport));\n    });\n  };\n};\nexport const leaveRoom = (rm, name) => {\n  return dispatch => {\n    console.log(\"testing leave room\");\n    leaveTheRoom(rm, name, result => {\n      dispatch(toggleRoom(result.flag));\n      dispatch(newCustomer(result.customers));\n      dispatch(toggleSupport(result.showSupport));\n    });\n  };\n};\nexport const updateCustomers = dumy => {\n  return dispatch => {\n    console.log(\"testing update customers\");\n    updateTheCustomers(dumy, result => {\n      dispatch(updateCustomer(result));\n    });\n  };\n};\nexport const newMessage = messages => ({\n  type: NEW_MESSAGE,\n  payload: {\n    messages\n  }\n});\nexport const toggleRoom = showRoom => ({\n  type: TOGGLE_ROOM,\n  payload: {\n    showRoom\n  }\n});\nexport const toggleSupport = showSupport => ({\n  type: TOGGLE_SUPPORT,\n  payload: {\n    showSupport\n  }\n});\nexport const newCustomer = customers => ({\n  type: NEW_CUSTOMER,\n  payload: {\n    customers\n  }\n});\nexport const updateCustomer = customers => ({\n  type: UPDATE_CUSTOMER,\n  payload: {\n    customers\n  }\n}); //actions for movie search and filter\n\nexport const incrementCounts = id => ({\n  type: INCREMENT_COUNTS,\n  payload: {\n    id\n  }\n});\nexport const setMovieFilter = filter => ({\n  type: SET_MOVIE_FILTER,\n  payload: {\n    filter\n  }\n});\nexport const populateMovies = movies => ({\n  type: POPULATE_MOVIES,\n  payload: {\n    movies: movies\n  }\n});\nexport const setGenre = genre => ({\n  type: SET_GENRE,\n  payload: {\n    GENRES: genre\n  }\n});\nexport const toggleBox = num => ({\n  type: TOGGLE_BOX,\n  payload: {\n    num\n  }\n});\nexport const resetCheckbox = () => ({\n  type: RESET_CHECKBOX\n});\nexport const toggleClick = () => ({\n  type: TOGGLE_CLICK\n});\nexport const setClick = click => ({\n  type: SET_CLICK,\n  payload: {\n    click\n  }\n});\nexport const resetClick = click => ({\n  type: RESET_CLICK,\n  payload: {\n    click\n  }\n});\nexport const toggleSignupFlag = () => ({\n  type: TOGGLE_SIGNUP_FLAG\n});\nexport const setSignupFlag = click => ({\n  type: SET_SIGNUP_FLAG,\n  payload: {\n    click\n  }\n});\nexport const resetSignupFlag = click => ({\n  type: RESET_SIGNUP_FLAG,\n  payload: {\n    click\n  }\n});\nexport const login = userInfo => ({\n  type: LOGIN,\n  payload: userInfo\n});\nexport const logout = () => ({\n  type: LOGOUT\n});\nexport const attemptLogin = () => ({\n  type: ATTEMPT_LOGIN\n});\nexport const invalidLogin = () => ({\n  type: INVALID_LOGIN\n});\nexport const loginError = () => ({\n  type: LOGIN_ERROR\n});\nexport const successfulLogin = () => ({\n  type: SUCCESSFUL_LOGIN\n});\nexport const validateLogin = (username, password) => {\n  return dispatch => {\n    dispatch(fetchStarted());\n    setTimeout(() => {\n      dispatch(attemptLogin());\n      const database = firebase.firestore();\n      database.collection(\"users\").where(\"username\", \"==\", username).where(\"password\", \"==\", password).get().then(queryStapshot => {\n        if (queryStapshot.size === 1) {\n          const doc = queryStapshot.docs[0];\n          const user = {\n            currentUser: doc.id,\n            name: doc.data().name,\n            username: doc.data().username,\n            onboardingComplete: true,\n            movies: doc.data().movies,\n            onboardingComplete: doc.data().onboardingComplete\n          };\n          dispatch(successfulLogin());\n          dispatch(login(user));\n          dispatch(toggleFetch());\n        } else {\n          console.log(\"Invalid login\");\n          dispatch(invalidLogin());\n          dispatch(toggleFetch());\n        }\n      }).catch(error => {\n        console.log(\"Login error\");\n        dispatch(loginError());\n      });\n    }, 1000);\n  };\n};\nexport const invalidSignup = () => ({\n  type: INVALID_SIGNUP\n});\nexport const successfulSignup = () => ({\n  type: SUCCESSFUL_SIGNUP\n});\nexport const attemptSignup = (name, username, password) => {\n  return dispatch => {\n    var taken = false;\n    const database = firebase.firestore();\n    database.collection(\"users\").get().then(queryStapshot => {\n      queryStapshot.forEach(doc => {\n        if (doc.data().username === username) {\n          dispatch(invalidSignup());\n          taken = true;\n        }\n      });\n\n      if (taken === false) {\n        console.log(\"did it get HERE\");\n        dispatch(addUser(name, username, password));\n      }\n    }).catch(error => {\n      console.log(\"Signup error\");\n    });\n  };\n};\nexport const addUser = (name, username, password) => {\n  return dispatch => {\n    dispatch(fetchStarted());\n    setTimeout(() => {\n      const database = firebase.firestore();\n      database.collection(\"users\").add({\n        name: name,\n        username: username,\n        password: password,\n        onboardingComplete: false,\n        movies: []\n      }).then(doc => {\n        let id = doc.id;\n        dispatch(signup());\n        dispatch(toggleFetch());\n        dispatch(toggleSignupFlag());\n      });\n      dispatch(signup());\n      dispatch(validateLogin(username, password));\n      dispatch(toggleFetch());\n    }, 1000);\n  };\n};\nexport const signup = () => ({\n  type: SIGNUP\n});\nexport const onboard = () => ({\n  type: ONBOARD\n});\nexport const getReviews = () => {\n  return dispatch => {\n    dispatch(fetchStarted());\n    setTimeout(() => {\n      console.log(\"get the reviews\");\n      const database = firebase.firestore();\n      database.collection(\"reviews\") //.where(\"movie\", \"==\", movie)\n      .get().then(queryStapshot => {\n        if (queryStapshot.size > 0) {\n          const reviews = {};\n          queryStapshot.forEach(doc => {\n            reviews[doc.id] = {\n              movie: doc.data().movie,\n              title: doc.data().title,\n              review: doc.data().review,\n              author: doc.data().author,\n              year: doc.data().date //countdown: doc.data().countdown\n\n            };\n            console.log(doc.id);\n          });\n          dispatch(storeReviews(reviews));\n          dispatch(toggleFetch());\n        } else {\n          console.log(\"No reviews\");\n          dispatch(toggleFetch());\n        }\n      }).catch(error => {\n        console.log(\"Error getting reviews\");\n      });\n    }, 1000);\n  };\n};\nexport const storeReviews = reviews => ({\n  type: STORE_REVIEWS,\n  payload: {\n    reviews: reviews\n  }\n});\nexport const addReview = (movie, title, author, year, review) => {\n  return dispatch => {\n    const database = firebase.firestore();\n    database.collection(\"reviews\").add({\n      movie: movie,\n      title: title,\n      author: author,\n      year: year,\n      review: review //countdown: countdown\n\n    }).then(doc => {\n      let id = doc.id;\n    });\n    dispatch(getReviews());\n  };\n};\nexport const addToWatchlist = (currentUser, movie) => {\n  return dispatch => {\n    dispatch(fetchStarted());\n    setTimeout(() => {\n      const database = firebase.firestore();\n      database.collection(\"users\").doc(currentUser).update({\n        movies: firebase.firestore.FieldValue.arrayUnion(movie)\n      }).then(() => {\n        dispatch(addMovieToUser(currentUser, movie));\n        dispatch(onboardingComplete());\n        dispatch(toggleFetch()); //dispatch(getWatchlist(currentUser))\n      }).catch(error => {\n        console.log(\"Error updating watchlist\");\n      });\n    }, 1000);\n  };\n};\nexport const addMovieToUser = (currentUser, movie) => ({\n  type: ADD_MOVIE_TO_USER,\n  payload: {\n    currentUser: currentUser,\n    movie: movie\n  }\n});\nexport const rentWatchlist = currentUser => {\n  return dispatch => {\n    const database = firebase.firestore();\n    database.collection(\"users\").doc(currentUser).update({\n      movies: []\n    }).then(() => {//dispatch(rentMovies())\n      //dispatch(getWatchlist(currentUser))\n    }).catch(error => {\n      console.log(\"Error renting\");\n    });\n  };\n};\nexport const onboardingCompleteInDatabase = currentUser => {\n  return dispatch => {\n    const database = firebase.firestore();\n    database.collection(\"users\").doc(currentUser).update({\n      onboardingComplete: true\n    }).then(() => {\n      dispatch(onboardingComplete());\n    }).catch(error => {\n      console.log(\"Error updating onboarding\");\n    });\n  };\n};\nexport const onboardingComplete = () => ({\n  type: COMPLETE_ONBOARDING\n});\nexport const filterUsed = () => ({\n  type: FILTER_USED\n});\nexport const toggleBoarding = () => ({\n  type: TOGGLE_BOARDING\n});\nexport const populateUserMovies = userMovies => ({\n  type: POPULATE_USER_MOVIES,\n  payload: {\n    userMovies: userMovies\n  }\n});\nexport const fetchFailed = () => ({\n  type: FETCH_FAIL\n});\nexport const fetchStarted = () => ({\n  type: IS_FETCHING\n});\nexport const toggleFetch = () => ({\n  type: TOGGLE_FETCH\n});\nexport const toggleFetchPost = () => ({\n  type: TOGGLE_FETCHPOST\n});\nexport const resetFetch = () => ({\n  type: RESET_FETCH\n});","map":{"version":3,"sources":["/Users/annanorte/Desktop/group7_project-final/src/redux/actions.js"],"names":["firebase","sendMessage","joinTheRoom","updateTheCustomers","leaveTheRoom","NEW_MESSAGE","TOGGLE_ROOM","NEW_CUSTOMER","TOGGLE_SUPPORT","UPDATE_CUSTOMER","INCREMENT_COUNTS","SET_MOVIE_FILTER","POPULATE_MOVIES","SET_GENRE","TOGGLE_BOX","RESET_CHECKBOX","TOGGLE_CLICK","SET_CLICK","RESET_CLICK","LOGIN","LOGOUT","SIGNUP","ATTEMPT_LOGIN","INVALID_LOGIN","LOGIN_ERROR","SUCCESSFUL_LOGIN","STORE_REVIEWS","ADD_MOVIE_TO_USER","COMPLETE_ONBOARDING","FILTER_USED","TOGGLE_BOARDING","POPULATE_USER_MOVIES","ONBOARD","FETCH_FAIL","IS_FETCHING","TOGGLE_FETCH","RESET_FETCH","TOGGLE_FETCHPOST","TOGGLE_SIGNUP_FLAG","SET_SIGNUP_FLAG","RESET_SIGNUP_FLAG","SUCCESSFUL_SIGNUP","INVALID_SIGNUP","INVALID","sendToServer","message","name","dispatch","result","console","log","newMessage","joinRoom","rm","toggleRoom","flag","newCustomer","customers","toggleSupport","showSupport","leaveRoom","updateCustomers","dumy","updateCustomer","messages","type","payload","showRoom","incrementCounts","id","setMovieFilter","filter","populateMovies","movies","setGenre","genre","GENRES","toggleBox","num","resetCheckbox","toggleClick","setClick","click","resetClick","toggleSignupFlag","setSignupFlag","resetSignupFlag","login","userInfo","logout","attemptLogin","invalidLogin","loginError","successfulLogin","validateLogin","username","password","fetchStarted","setTimeout","database","firestore","collection","where","get","then","queryStapshot","size","doc","docs","user","currentUser","data","onboardingComplete","toggleFetch","catch","error","invalidSignup","successfulSignup","attemptSignup","taken","forEach","addUser","add","signup","onboard","getReviews","reviews","movie","title","review","author","year","date","storeReviews","addReview","addToWatchlist","update","FieldValue","arrayUnion","addMovieToUser","rentWatchlist","onboardingCompleteInDatabase","filterUsed","toggleBoarding","populateUserMovies","userMovies","fetchFailed","toggleFetchPost","resetFetch"],"mappings":"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","sourcesContent":["import firebase from '../fbConfig';\nimport { sendMessage, joinTheRoom, updateTheCustomers, leaveTheRoom} from \"../client\";\nimport { NEW_MESSAGE, TOGGLE_ROOM, NEW_CUSTOMER, TOGGLE_SUPPORT, UPDATE_CUSTOMER, INCREMENT_COUNTS,SET_MOVIE_FILTER,POPULATE_MOVIES, SET_GENRE, TOGGLE_BOX, RESET_CHECKBOX, TOGGLE_CLICK, SET_CLICK, RESET_CLICK, LOGIN, LOGOUT, SIGNUP, ATTEMPT_LOGIN, INVALID_LOGIN, LOGIN_ERROR, SUCCESSFUL_LOGIN, STORE_REVIEWS, ADD_MOVIE_TO_USER, COMPLETE_ONBOARDING, FILTER_USED, TOGGLE_BOARDING, POPULATE_USER_MOVIES, ONBOARD, FETCH_FAIL, IS_FETCHING, TOGGLE_FETCH, RESET_FETCH, TOGGLE_FETCHPOST, TOGGLE_SIGNUP_FLAG, SET_SIGNUP_FLAG, RESET_SIGNUP_FLAG, SUCCESSFUL_SIGNUP, INVALID_SIGNUP} from \"./actionTypeConstants\";\nimport { INVALID } from '../constants';\n\n\n//actions for live chat feature\nexport const sendToServer = (message, name) => {\n    return dispatch => {\n        sendMessage(message, name, result=> {\n            console.log(result);\n            dispatch(newMessage(result));\n        });\n    }\n}\n\nexport const joinRoom = (rm, name) => {\n    return dispatch => {\n        console.log(\"testing join room\")\n        joinTheRoom(rm, name, result=>{\n            dispatch(toggleRoom(result.flag))\n            dispatch(newCustomer(result.customers))\n            dispatch(toggleSupport(result.showSupport))\n        });\n    }\n}\n\nexport const leaveRoom = (rm, name) => {\n    return dispatch => {\n        console.log(\"testing leave room\")\n        leaveTheRoom(rm, name, result=>{\n            dispatch(toggleRoom(result.flag))\n            dispatch(newCustomer(result.customers))\n            dispatch(toggleSupport(result.showSupport))\n        });\n    }\n}\n\nexport const updateCustomers = (dumy) => {\n    return dispatch => {\n        console.log(\"testing update customers\")\n        updateTheCustomers(dumy,result=>{\n            dispatch(updateCustomer(result))\n        });\n    }\n}\n\nexport const newMessage = messages => ({\n    type: NEW_MESSAGE,\n    payload: {\n        messages\n    }\n})\n\nexport const toggleRoom = showRoom => ({\n    type: TOGGLE_ROOM,\n    payload:{\n        showRoom\n    }\n})\n\nexport const toggleSupport = showSupport => ({\n    type: TOGGLE_SUPPORT,\n    payload:{\n        showSupport\n    }\n})\n\nexport const newCustomer = customers => ({\n    type: NEW_CUSTOMER,\n    payload: {\n        customers\n    }\n})\n\nexport const updateCustomer = customers => ({\n    type: UPDATE_CUSTOMER,\n    payload: {\n        customers\n    }\n})\n\n//actions for movie search and filter\nexport const incrementCounts= (id) => ({\n    type: INCREMENT_COUNTS,\n    payload: {id}\n  });\nexport const setMovieFilter = filter => ({ type: SET_MOVIE_FILTER, payload: { filter } });\nexport const populateMovies = (movies) => (\n    {\n      type:POPULATE_MOVIES,\n      payload: {\n        movies: movies\n      }\n    }\n  )\nexport const setGenre = genre => ({ type: SET_GENRE, payload:{GENRES:genre}});\nexport const toggleBox = num => ({\n    type: TOGGLE_BOX,\n    payload: { num}\n});\nexport const resetCheckbox = () => ({type: RESET_CHECKBOX});\nexport const toggleClick =()  => ({type: TOGGLE_CLICK});\nexport const setClick = click => ({ type: SET_CLICK, payload: { click } });\nexport const resetClick = click => ({ type: RESET_CLICK, payload: { click } });\n\nexport const toggleSignupFlag =()  => ({type: TOGGLE_SIGNUP_FLAG});\nexport const setSignupFlag = click => ({ type: SET_SIGNUP_FLAG, payload: { click } });\nexport const resetSignupFlag = click => ({ type: RESET_SIGNUP_FLAG, payload: { click } });\n\nexport const login = (userInfo) => ({\n    type: LOGIN,\n    payload: userInfo\n})\n\nexport const logout = () => ({\n    type: LOGOUT\n})\n\nexport const attemptLogin = () => ({\n    type: ATTEMPT_LOGIN\n})\n\nexport const invalidLogin = () => ({\n    type: INVALID_LOGIN\n})\n\nexport const loginError = () => ({\n    type: LOGIN_ERROR\n})\n\nexport const successfulLogin = () => ({\n    type: SUCCESSFUL_LOGIN\n})\n\nexport const validateLogin = (username, password) => {\n    return dispatch => {\n        dispatch(fetchStarted());\n        setTimeout(()=>{\n            dispatch(attemptLogin());\n            const database = firebase.firestore();\n            database.collection(\"users\")\n            .where(\"username\", \"==\", username)\n            .where(\"password\", \"==\", password)\n            .get()\n            .then((queryStapshot) => {\n                if (queryStapshot.size === 1) {\n                    const doc = queryStapshot.docs[0];\n                    const user = {\n                        currentUser: doc.id,\n                        name: doc.data().name,\n                        username: doc.data().username,\n                        onboardingComplete: true,\n                        movies: doc.data().movies,\n                        onboardingComplete: doc.data().onboardingComplete,\n                    }\n                    dispatch(successfulLogin());\n                    dispatch(login(user));\n                    dispatch(toggleFetch());\n                }\n                else {\n                    console.log(\"Invalid login\")\n                    dispatch(invalidLogin());\n                    dispatch(toggleFetch());\n                }\n            })\n            .catch(error => {\n                console.log(\"Login error\")\n                dispatch(loginError());\n            });\n        }\n        ,1000)\n    }\n}\n\nexport const invalidSignup = () => ({\n    type: INVALID_SIGNUP\n})\n\nexport const successfulSignup = () => ({\n    type: SUCCESSFUL_SIGNUP\n})\n\nexport const attemptSignup = (name, username, password) => {\n    return dispatch => {\n        var taken = false\n        const database = firebase.firestore();\n        database.collection(\"users\")\n        .get()\n        .then((queryStapshot) => {\n            queryStapshot.forEach(doc => {\n                if(doc.data().username === username){\n                    dispatch(invalidSignup())\n                    taken = true\n                }\n            })\n            if(taken === false){\n                console.log(\"did it get HERE\")\n                dispatch(addUser(name, username, password))\n            }\n            \n        })\n        .catch(error => {\n            console.log(\"Signup error\")\n        });\n    }\n}\n\nexport const addUser = (name, username, password) => {\n    return dispatch => {\n        dispatch(fetchStarted());\n        setTimeout(()=>{\n            const database = firebase.firestore();\n            database.collection(\"users\")\n            .add({\n                name: name,\n                username: username,\n                password: password,\n                onboardingComplete: false,\n                movies: []\n            })\n            .then(doc => {\n                let id = doc.id\n                dispatch(signup());\n                dispatch(toggleFetch());\n                dispatch(toggleSignupFlag());\n            })\n            dispatch(signup());\n            dispatch(validateLogin(username, password));\n            dispatch(toggleFetch());\n\n        }, 1000)\n    }\n}\n\nexport const signup = () => ({\n    type: SIGNUP\n})\n\nexport const onboard = () => ({\n    type: ONBOARD\n});\n\nexport const getReviews = () => {\n    return dispatch => {\n            dispatch(fetchStarted());\n            setTimeout(()=>{\n                console.log(\"get the reviews\");\n                const database = firebase.firestore();\n                database.collection(\"reviews\")\n                //.where(\"movie\", \"==\", movie)\n                .get()\n                .then((queryStapshot) => {\n                    if (queryStapshot.size > 0) {\n                        const reviews = {};\n                        queryStapshot.forEach(doc => {\n                            reviews[doc.id] = {\n                                movie: doc.data().movie,\n                                title: doc.data().title,\n                                review: doc.data().review,\n                                author: doc.data().author,\n                                year: doc.data().date,\n                                //countdown: doc.data().countdown\n                            }\n                        console.log(doc.id)\n                        })\n                        dispatch(storeReviews(reviews));\n                        dispatch(toggleFetch());\n                    }\n                    else {\n                        console.log(\"No reviews\")\n                        dispatch(toggleFetch());\n                    }\n                })\n                .catch(error => {\n                    console.log(\"Error getting reviews\")\n                })\n            }, 1000)\n    }\n};\n\nexport const storeReviews = reviews => ({\n    type: STORE_REVIEWS,\n    payload: {\n        reviews: reviews\n    }\n})\n\nexport const addReview = (movie, title, author, year, review) => {\n    return dispatch => {\n            const database = firebase.firestore();\n            database.collection(\"reviews\")\n            .add({\n                movie: movie,\n                title: title,\n                author: author,\n                year: year,\n                review: review,\n                //countdown: countdown\n            })\n            .then(doc => {\n                let id = doc.id\n            })\n            dispatch(getReviews());\n    }\n}\n\nexport const addToWatchlist = (currentUser, movie) => {\n    return dispatch => {\n        dispatch(fetchStarted());\n        setTimeout(()=>{\n            const database = firebase.firestore();\n            database.collection(\"users\").doc(currentUser)\n                .update({\n                    movies: firebase.firestore.FieldValue.arrayUnion(movie)\n                })\n                .then(() => {\n                    dispatch(addMovieToUser(currentUser, movie))\n                    dispatch(onboardingComplete())\n                    dispatch(toggleFetch())\n                    //dispatch(getWatchlist(currentUser))\n                })\n                .catch(error => {\n                    console.log(\"Error updating watchlist\")\n                })\n        }, 1000)\n             \n    }\n};\n\nexport const addMovieToUser = (currentUser, movie) => ({\n    type: ADD_MOVIE_TO_USER,\n    payload: {\n        currentUser: currentUser,\n        movie: movie\n    }\n})\n\nexport const rentWatchlist = (currentUser) => {\n    return dispatch => {\n        const database = firebase.firestore();\n        database.collection(\"users\").doc(currentUser)\n            .update({\n                movies: []\n            })\n            .then(() => {\n                //dispatch(rentMovies())\n                //dispatch(getWatchlist(currentUser))\n            })\n            .catch(error => {\n                console.log(\"Error renting\")\n            })\n    }\n};\n\nexport const onboardingCompleteInDatabase = (currentUser) => {\n    return dispatch => {\n        const database = firebase.firestore();\n        database.collection(\"users\").doc(currentUser)\n            .update({\n                onboardingComplete: true\n            })\n            .then(() => {\n                dispatch(onboardingComplete())\n            })\n            .catch(error => {\n                console.log(\"Error updating onboarding\")\n            })\n             \n    }\n};\n\nexport const onboardingComplete = () => ({type: COMPLETE_ONBOARDING});\nexport const filterUsed = () => ({type: FILTER_USED});\nexport const toggleBoarding = () => ({type: TOGGLE_BOARDING});\n\nexport const populateUserMovies = (userMovies) => (\n    {\n      type:POPULATE_USER_MOVIES,\n      payload: {\n        userMovies: userMovies\n      }\n    }\n  )\n\nexport const fetchFailed = () => ({type: FETCH_FAIL})\nexport const fetchStarted = () => ({type: IS_FETCHING})\nexport const toggleFetch = () => ({type: TOGGLE_FETCH})\nexport const toggleFetchPost = () => ({type: TOGGLE_FETCHPOST})\nexport const resetFetch = () => ({type: RESET_FETCH})\n\n"]},"metadata":{},"sourceType":"module"}