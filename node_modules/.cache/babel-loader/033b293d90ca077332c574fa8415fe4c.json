{"ast":null,"code":"/** CLIENT CONFIGURATION - connect to the server */\nconst socketIOClient = require(\"socket.io-client\"); // When deployed, connect to the hosted server, otherwise connect to local server\n// Localhost port must match server\n\n\nlet host = process.env.NODE_ENV === 'production' ? \"react-quarantine-moviesgit .herokuapp.com\" : \"localhost:4002\";\nlet socket = socketIOClient.connect(host, {\n  secure: true\n}); // Checks which host we're connected to (for troubleshooting);\n\nconsole.log(\"connected to \" + host);\nsocket.on(\"notification\", msg => {\n  console.log(\"Server says: \" + msg);\n});\nexport const sendMessage = (msg, name, callbackFunc) => {\n  socket.emit(\"new message\", {\n    msg,\n    name\n  });\n  socket.on(\"all messages\", result => {\n    callbackFunc(result);\n  });\n};\nexport const joinTheRoom = (rm, name, callbackFunc) => {\n  socket.emit(\"join room\", {\n    rm,\n    name\n  });\n  socket.on(\"joined room\", result => {\n    callbackFunc(result);\n  });\n};\nexport const leaveTheRoom = (rm, name, callbackFunc) => {\n  socket.emit(\"leave room\", {\n    rm,\n    name\n  });\n  socket.on(\"left room\", result => {\n    callbackFunc(result);\n  });\n};\nexport const updateTheCustomers = (dumy, callbackFunc) => {\n  socket.emit(\"update customer list\", dumy);\n  socket.on(\"updated customer list\", result => {\n    callbackFunc(result);\n  });\n};","map":{"version":3,"sources":["/Users/annanorte/Documents/CS7580/git_personal_final/quarantine-movies/src/client.js"],"names":["socketIOClient","require","host","process","env","NODE_ENV","socket","connect","secure","console","log","on","msg","sendMessage","name","callbackFunc","emit","result","joinTheRoom","rm","leaveTheRoom","updateTheCustomers","dumy"],"mappings":"AAAA;AACA,MAAMA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B,C,CAEA;AACA;;;AACA,IAAIC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACP,2CADO,GACuC,gBADlD;AAEA,IAAIC,MAAM,GAAGN,cAAc,CAACO,OAAf,CAAuBL,IAAvB,EAA6B;AAACM,EAAAA,MAAM,EAAE;AAAT,CAA7B,CAAb,C,CACA;;AACAC,OAAO,CAACC,GAAR,CAAY,kBAAkBR,IAA9B;AAEAI,MAAM,CAACK,EAAP,CAAU,cAAV,EAA0BC,GAAG,IAAI;AAC7BH,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBE,GAA9B;AACH,CAFD;AAIA,OAAO,MAAMC,WAAW,GAAG,CAACD,GAAD,EAAME,IAAN,EAAYC,YAAZ,KAA6B;AACpDT,EAAAA,MAAM,CAACU,IAAP,CAAY,aAAZ,EAA2B;AAACJ,IAAAA,GAAD;AAAME,IAAAA;AAAN,GAA3B;AACAR,EAAAA,MAAM,CAACK,EAAP,CAAU,cAAV,EAA0BM,MAAM,IAAI;AAChCF,IAAAA,YAAY,CAACE,MAAD,CAAZ;AACH,GAFD;AAGH,CALM;AAOP,OAAO,MAAMC,WAAW,GAAG,CAACC,EAAD,EAAKL,IAAL,EAAWC,YAAX,KAA4B;AACnDT,EAAAA,MAAM,CAACU,IAAP,CAAY,WAAZ,EAAyB;AAACG,IAAAA,EAAD;AAAKL,IAAAA;AAAL,GAAzB;AACAR,EAAAA,MAAM,CAACK,EAAP,CAAU,aAAV,EAAyBM,MAAM,IAAG;AAC9BF,IAAAA,YAAY,CAACE,MAAD,CAAZ;AACH,GAFD;AAGH,CALM;AAOP,OAAO,MAAMG,YAAY,GAAG,CAACD,EAAD,EAAKL,IAAL,EAAWC,YAAX,KAA4B;AACpDT,EAAAA,MAAM,CAACU,IAAP,CAAY,YAAZ,EAA0B;AAACG,IAAAA,EAAD;AAAKL,IAAAA;AAAL,GAA1B;AACAR,EAAAA,MAAM,CAACK,EAAP,CAAU,WAAV,EAAuBM,MAAM,IAAG;AAC5BF,IAAAA,YAAY,CAACE,MAAD,CAAZ;AACH,GAFD;AAGH,CALM;AAOP,OAAO,MAAMI,kBAAkB,GAAG,CAACC,IAAD,EAAOP,YAAP,KAAwB;AACtDT,EAAAA,MAAM,CAACU,IAAP,CAAY,sBAAZ,EAAoCM,IAApC;AACAhB,EAAAA,MAAM,CAACK,EAAP,CAAU,uBAAV,EAAmCM,MAAM,IAAG;AACxCF,IAAAA,YAAY,CAACE,MAAD,CAAZ;AACH,GAFD;AAGH,CALM","sourcesContent":["/** CLIENT CONFIGURATION - connect to the server */\nconst socketIOClient = require(\"socket.io-client\");\n\n// When deployed, connect to the hosted server, otherwise connect to local server\n// Localhost port must match server\nlet host = process.env.NODE_ENV === 'production' ?\n    \"react-quarantine-moviesgit .herokuapp.com\" : \"localhost:4002\"\nlet socket = socketIOClient.connect(host, {secure: true});\n// Checks which host we're connected to (for troubleshooting);\nconsole.log(\"connected to \" + host);\n\nsocket.on(\"notification\", msg => {\n    console.log(\"Server says: \" + msg);\n})\n\nexport const sendMessage = (msg, name, callbackFunc) => {\n    socket.emit(\"new message\", {msg, name});\n    socket.on(\"all messages\", result => {\n        callbackFunc(result);\n    })\n}\n\nexport const joinTheRoom = (rm, name, callbackFunc) => {\n    socket.emit(\"join room\", {rm, name});\n    socket.on(\"joined room\", result =>{\n        callbackFunc(result)\n    });\n}\n\nexport const leaveTheRoom = (rm, name, callbackFunc) => {\n    socket.emit(\"leave room\", {rm, name});\n    socket.on(\"left room\", result =>{\n        callbackFunc(result)\n    });\n}\n\nexport const updateTheCustomers = (dumy, callbackFunc) => {\n    socket.emit(\"update customer list\", dumy);\n    socket.on(\"updated customer list\", result =>{\n        callbackFunc(result)\n    });\n}\n"]},"metadata":{},"sourceType":"module"}