{"ast":null,"code":"import { CHECKBOXES } from \"../constants\";\nimport { fetchStarted, toggleFetch } from \"./actions\";\nexport const getMoviesState = store => store.movieList;\nexport const getMovieList = store => getMoviesState(store) ? getMoviesState(store).allIds : [];\nexport const getMovieById = (store, id) => getMoviesState(store) ? { ...getMoviesState(store).byIds[id],\n  id\n} : {};\n/**\n * example of a slightly more complex selector\n * select from store combining information from multiple reducers\n */\n\nexport const getMovies = store => getMovieList(store).map(id => getMovieById(store, id));\nexport const getMoviesByCheckbox = (store, genreList) => {\n  const allMovies = getMovies(store);\n  const copyMovies = Object.assign([], allMovies);\n  const targetMovies = [];\n\n  for (let i = 0; i < CHECKBOXES.GENRES.length; i++) {\n    if (genreList[i].isChecked) {\n      for (let j = 0; j < allMovies.length; j++) {\n        if (allMovies[j].genre.includes(genreList[i].value)) {\n          targetMovies.push(copyMovies[j]);\n        }\n      }\n    }\n  }\n\n  let finalMovies = targetMovies.filter((item, index) => targetMovies.indexOf(item) === index);\n  return finalMovies;\n};\nexport const getMoviesByRating = store => {\n  const allMovies = getMovies(store);\n  allMovies.sort((a, b) => b.rating - a.rating);\n  return allMovies;\n};","map":{"version":3,"sources":["/Users/annanorte/Documents/CS7580/git_personal_final/quarantine-movies/src/redux/selectors.js"],"names":["CHECKBOXES","fetchStarted","toggleFetch","getMoviesState","store","movieList","getMovieList","allIds","getMovieById","id","byIds","getMovies","map","getMoviesByCheckbox","genreList","allMovies","copyMovies","Object","assign","targetMovies","i","GENRES","length","isChecked","j","genre","includes","value","push","finalMovies","filter","item","index","indexOf","getMoviesByRating","sort","a","b","rating"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,cAAzB;AACA,SAAQC,YAAR,EAAsBC,WAAtB,QAAwC,WAAxC;AACA,OAAO,MAAMC,cAAc,GAAGC,KAAK,IAAIA,KAAK,CAACC,SAAtC;AAEP,OAAO,MAAMC,YAAY,GAAGF,KAAK,IAC7BD,cAAc,CAACC,KAAD,CAAd,GAAwBD,cAAc,CAACC,KAAD,CAAd,CAAsBG,MAA9C,GAAuD,EADpD;AAGP,OAAO,MAAMC,YAAY,GAAG,CAACJ,KAAD,EAAQK,EAAR,KACxBN,cAAc,CAACC,KAAD,CAAd,GAAwB,EAAE,GAAGD,cAAc,CAACC,KAAD,CAAd,CAAsBM,KAAtB,CAA4BD,EAA5B,CAAL;AAAsCA,EAAAA;AAAtC,CAAxB,GAAqE,EADlE;AAGP;;;;;AAIA,OAAO,MAAME,SAAS,GAAGP,KAAK,IAC5BE,YAAY,CAACF,KAAD,CAAZ,CAAoBQ,GAApB,CAAwBH,EAAE,IAAID,YAAY,CAACJ,KAAD,EAAQK,EAAR,CAA1C,CADK;AAGP,OAAO,MAAMI,mBAAmB,GAAG,CAACT,KAAD,EAAQU,SAAR,KAAsB;AACrD,QAAMC,SAAS,GAAGJ,SAAS,CAACP,KAAD,CAA3B;AACA,QAAMY,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,SAAlB,CAAnB;AACA,QAAMI,YAAY,GAAG,EAArB;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGpB,UAAU,CAACqB,MAAX,CAAkBC,MAAnC,EAA2CF,CAAC,EAA5C,EAA+C;AAC7C,QAAGN,SAAS,CAACM,CAAD,CAAT,CAAaG,SAAhB,EAA0B;AACxB,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACT,SAAS,CAACO,MAAzB,EAAgCE,CAAC,EAAjC,EAAoC;AAClC,YAAGT,SAAS,CAACS,CAAD,CAAT,CAAaC,KAAb,CAAmBC,QAAnB,CAA4BZ,SAAS,CAACM,CAAD,CAAT,CAAaO,KAAzC,CAAH,EAAmD;AACjDR,UAAAA,YAAY,CAACS,IAAb,CAAkBZ,UAAU,CAACQ,CAAD,CAA5B;AACD;AACF;AACF;AACF;;AACH,MAAIK,WAAW,GAAGV,YAAY,CAACW,MAAb,CAAoB,CAACC,IAAD,EAAOC,KAAP,KAAiBb,YAAY,CAACc,OAAb,CAAqBF,IAArB,MAA+BC,KAApE,CAAlB;AACA,SAAOH,WAAP;AACD,CAfM;AAiBP,OAAO,MAAMK,iBAAiB,GAAI9B,KAAD,IAAW;AAC1C,QAAMW,SAAS,GAAGJ,SAAS,CAACP,KAAD,CAA3B;AACAW,EAAAA,SAAS,CAACoB,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,MAAF,GAAUF,CAAC,CAACE,MAArC;AACA,SAAOvB,SAAP;AACD,CAJM","sourcesContent":["import {CHECKBOXES} from \"../constants\";\nimport {fetchStarted, toggleFetch} from \"./actions\"\nexport const getMoviesState = store => store.movieList;\n\nexport const getMovieList = store =>\n    getMoviesState(store) ? getMoviesState(store).allIds : [];\n  \nexport const getMovieById = (store, id) =>\n    getMoviesState(store) ? { ...getMoviesState(store).byIds[id], id } : {};\n\n/**\n * example of a slightly more complex selector\n * select from store combining information from multiple reducers\n */\nexport const getMovies = store =>\n  getMovieList(store).map(id => getMovieById(store, id));\n\nexport const getMoviesByCheckbox = (store, genreList) => {\n    const allMovies = getMovies(store);\n    const copyMovies = Object.assign([], allMovies);\n    const targetMovies = [];\n    for(let i=0; i < CHECKBOXES.GENRES.length; i++){\n      if(genreList[i].isChecked){\n        for(let j=0; j<allMovies.length;j++){\n          if(allMovies[j].genre.includes(genreList[i].value)){\n            targetMovies.push(copyMovies[j])\n          }\n        }\n      }\n    }\n  let finalMovies = targetMovies.filter((item, index) => targetMovies.indexOf(item) === index)\n  return finalMovies\n};\n\nexport const getMoviesByRating = (store) => {\n  const allMovies = getMovies(store);\n  allMovies.sort((a, b) => b.rating -a.rating);\n  return allMovies;\n};"]},"metadata":{},"sourceType":"module"}