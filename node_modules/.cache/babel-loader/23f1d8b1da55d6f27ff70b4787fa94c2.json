{"ast":null,"code":"var _jsxFileName = \"/Users/annanorte/Documents/CS7580/git_personal_final/quarantine-movies/src/components/CheckBoxList.js\";\nimport React, { Component, Fragment } from 'react';\nimport CheckBox from './CheckBox';\nimport { setGenre, toggleBox, fetchStarted, toggleFetch, resetCheckbox } from \"../redux/actions\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"reactstrap\";\nimport \"../styles/styles.css\";\n\nclass CheckBoxList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCheckChieldElement = event => {\n      this.props.fetchStarted();\n      const val = event.target.value;\n      setTimeout(() => {\n        this.props.toggleFetch();\n\n        for (let i = 0; i < this.props.allGenre.length; i++) {\n          if (this.props.allGenre[i].value === val) {\n            this.props.toggleBox(i + 1);\n          }\n        }\n      }, 1000);\n    };\n\n    this.reset = () => {\n      this.props.fetchStarted();\n      setTimeout(() => {\n        this.props.toggleFetch();\n        this.props.resetCheckbox();\n      }, 1000);\n    };\n\n    this.isChecked = () => {\n      for (let i = 0; i < this.props.allGenre.length; i++) {\n        if (this.props.allGenre[i].isChecked) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"filters\",\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      disabled: this.isChecked(),\n      onClick: this.reset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Reset Boxes\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, this.props.allGenre.map(genre => {\n      return React.createElement(CheckBox, {\n        handleCheckChieldElement: this.handleCheckChieldElement,\n        toggleFilter: this.props.toggleFilter,\n        checked: genre.isChecked,\n        value: genre.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      });\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  const allGenre = state.checkBoxes.GENRES;\n  return {\n    allGenre\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setGenre,\n  toggleBox,\n  fetchStarted,\n  toggleFetch,\n  resetCheckbox\n})(CheckBoxList);","map":{"version":3,"sources":["/Users/annanorte/Documents/CS7580/git_personal_final/quarantine-movies/src/components/CheckBoxList.js"],"names":["React","Component","Fragment","CheckBox","setGenre","toggleBox","fetchStarted","toggleFetch","resetCheckbox","connect","Button","CheckBoxList","constructor","props","handleCheckChieldElement","event","val","target","value","setTimeout","i","allGenre","length","reset","isChecked","render","map","genre","toggleFilter","mapStateToProps","state","checkBoxes","GENRES"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport  CheckBox from './CheckBox'\nimport { setGenre, toggleBox, fetchStarted, toggleFetch, resetCheckbox } from \"../redux/actions\";\nimport { connect } from \"react-redux\";\nimport {Button} from \"reactstrap\";\nimport \"../styles/styles.css\"\n\nclass CheckBoxList extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  handleCheckChieldElement = (event) => {\n    this.props.fetchStarted();\n    const val = event.target.value\n    setTimeout(()=>{\n      this.props.toggleFetch();\n      for(let i=0; i<this.props.allGenre.length; i++){\n        if(this.props.allGenre[i].value === val){\n           this.props.toggleBox(i+1)\n        }\n      }\n    }, 1000)\n  }\n\n  reset = () => {\n    this.props.fetchStarted();\n    setTimeout(()=>{\n      this.props.toggleFetch();\n      this.props.resetCheckbox();\n    }, 1000)\n  }\n\n  isChecked = () => {\n    for(let i=0; i<this.props.allGenre.length; i++){\n      if(this.props.allGenre[i].isChecked){\n         return false\n      }\n    }\n    return true\n  }\n\n  render() {\n    return (\n      <div id = \"filters\" className=\"App\">\n      <Button color = \"primary\" disabled = {this.isChecked()} onClick = {this.reset}>Reset Boxes</Button>\n        <ul>\n          \n       {\n       this.props.allGenre.map((genre) => {\n             return (\n                 <CheckBox handleCheckChieldElement={this.handleCheckChieldElement} toggleFilter={this.props.toggleFilter} checked = {genre.isChecked}  value={genre.value} />)\n           })\n        }\n        \n       </ul>\n\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n    const allGenre = state.checkBoxes.GENRES;\n    return {allGenre};\n};\nexport default connect(mapStateToProps,{setGenre, toggleBox, fetchStarted, toggleFetch, resetCheckbox})(CheckBoxList);"]},"metadata":{},"sourceType":"module"}